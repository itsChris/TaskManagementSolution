@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">TaskManagement</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/tasks">Task List</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/taskcreate">Create Task</NavLink>
                </li>
            </ul>
            <ul class="navbar-nav">
                @if (isAuthenticated)
                {
                    <li class="nav-item">
                        <a class="nav-link" href="#" @onclick="Logout">Logout (@username)</a>
                    </li>
                }
                else
                {
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/login">Login</NavLink>
                    </li>
                    <li class="nav-item">
                        <NavLink class="nav-link" href="/register">Register</NavLink>
                    </li>
                }
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool isAuthenticated;
    private string username;

    protected override async Task OnInitializedAsync()
    {
        await UpdateAuthenticationStateAsync();
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;
    }

    private async Task UpdateAuthenticationStateAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        isAuthenticated = user.Identity != null && user.Identity.IsAuthenticated;
        username = isAuthenticated ? user.Identity.Name : string.Empty;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await UpdateAuthenticationStateAsync();
        StateHasChanged();
    }

    private async Task Logout()
    {
        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).Logout();
        NavigationManager.NavigateTo("/login");
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
