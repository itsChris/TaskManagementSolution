@page "/taskcreate"

@using TaskManagement.Blazor.Services
@using TaskManagement.Shared.Enums
@using TaskManagement.Shared.Models

<div class="container my-5">
    <div class="card shadow-lg">
        <div class="card-header bg-primary text-white">
            <h3 class="mb-0">Create Task</h3>
        </div>
        <div class="card-body">
            <EditForm Model="@task" OnValidSubmit="@HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary class="alert alert-danger" />

                <div class="form-group mb-3">
                    <label for="title" class="form-label">Title</label>
                    <InputText id="title" class="form-control" @bind-Value="task.Title" />
                    <ValidationMessage For="@(() => task.Title)" />
                </div>

                <div class="form-group mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" @bind-Value="task.Description" />
                    <ValidationMessage For="@(() => task.Description)" />
                </div>

                <div class="form-group mb-3">
                    <label for="status" class="form-label">Status</label>
                    <InputSelect id="status" class="form-control" @bind-Value="task.Status" TValue="TaskState">
                        <option value="">Select Status</option>
                        @foreach (var status in Enum.GetValues<TaskState>())
                        {
                                <option value="@status">@status</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="@(() => task.Status)" />
                </div>

                <div class="form-group mb-3">
                    <label for="dueDate" class="form-label">Due Date</label>
                    <InputDate id="dueDate" class="form-control" @bind-Value="task.DueDate" TValue="DateTime?" />
                    <ValidationMessage For="@(() => task.DueDate)" />
                </div>

                <div class="text-center">
                    <button type="submit" class="btn btn-success btn-lg">Create Task</button>
                </div>
            </EditForm>

            @if (errorMessage != null)
            {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private TaskDto task = new TaskDto();
    private string? errorMessage;

    [Inject]
    private ITaskApiClient TaskApiClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private async Task HandleValidSubmit()
    {
        try
        {
            await TaskApiClient.CreateTaskAsync(task);
            errorMessage = null;
            NavigationManager.NavigateTo("/tasks");
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while creating the task. Please try again.";
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }
}
