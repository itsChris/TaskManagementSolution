@page "/login"
@using Microsoft.AspNetCore.Components.Authorization
@using TaskManagement.Shared.Models
@using Blazored.LocalStorage
@inject IHttpClientFactory HttpClientFactory
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILocalStorageService LocalStorage

<div class="container my-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card shadow-lg">
                <div class="card-header bg-primary text-white text-center">
                    <h3 class="mb-0">Login</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="loginModel" OnValidSubmit="PerformLogin">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" placeholder="Enter your email" />
                            <ValidationMessage For="@(() => loginModel.Email)" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" class="form-control" @bind-Value="loginModel.Password" type="password" placeholder="Enter your password" />
                            <ValidationMessage For="@(() => loginModel.Password)" />
                        </div>

                        <div class="text-center">
                            <button type="submit" class="btn btn-primary btn-lg w-100">Login</button>
                        </div>
                    </EditForm>

                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger mt-3 text-center">
                            @errorMessage
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;

    private async Task PerformLogin()
    {
        try
        {
            var client = HttpClientFactory.CreateClient("DefaultClient");

            var response = await client.PostAsJsonAsync("/login", loginModel);
            // var response = await client.PostAsJsonAsync("/login?useCookies=true", loginModel);

            if (response.IsSuccessStatusCode)
            {
                // ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(loginModel.Email);
                // NavigationManager.NavigateTo("/");

                 var result = await response.Content.ReadFromJsonAsync<TokenResponse>();

                if (result != null)
                {
                    await LocalStorage.SetItemAsync("authToken", result.AccessToken);
                    ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(loginModel.Email);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Invalid login response.";
                }
            }
            else
            {
                errorMessage = "Login failed. Please check your credentials.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }
}
