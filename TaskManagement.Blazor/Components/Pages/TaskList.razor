@page "/tasks"

@using Microsoft.JSInterop
@using TaskManagement.Blazor.Services
@using TaskManagement.Shared.Models

<div class="container my-5">
    <div class="card shadow-sm border-0 rounded-lg">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h4 class="mb-0">Task List</h4>
            <button class="btn btn-light btn-sm fw-bold text-primary" @onclick="CreateTask">+ Create Task</button>
        </div>
        <div class="card-body">
            @if (errorMessage != null)
            {
                <div class="alert alert-danger text-center">@errorMessage</div>
            }
            else if (tasks == null)
            {
                <p class="text-muted text-center">Loading tasks...</p>
            }
            else if (!tasks.Any())
            {
                <p class="text-muted text-center">No tasks available.</p>
            }
            else
            {
                <div class="table-responsive">
                    <table class="table align-middle table-hover">
                        <thead class="table-light">
                            <tr>
                                <th>Title</th>
                                <th>Description</th>
                                <th>Status</th>
                                <th>Created At</th>
                                <th>Due Date</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var task in tasks)
                            {
                                <tr>
                                    <td class="fw-bold">@task.Title</td>
                                    <td>@task.Description</td>
                                    <td>
                                        <span class="badge bg-info text-dark">@task.Status</span>
                                    </td>
                                    <td>@task.CreatedAt.ToString("yyyy-MM-dd")</td>
                                    <td>@(task.DueDate?.ToString("yyyy-MM-dd") ?? "N/A")</td>
                                    <td>
                                        <div class="d-flex gap-2 justify-content-center">
                                            <button class="btn btn-outline-primary btn-sm" @onclick="() => EditTask(task.Id)">
                                                <i class="bi bi-pencil"></i> Edit
                                            </button>
                                            <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteTask(task.Id)">
                                                <i class="bi bi-trash"></i> Delete
                                            </button>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<TaskDto>? tasks;
    private string? errorMessage;

    [Inject]
    private ITaskApiClient TaskApiClient { get; set; } = default!;

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    [Inject]
    private IJSRuntime JSRuntime { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            tasks = (await TaskApiClient.GetTasksAsync()).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while fetching tasks. Please try again.";
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }

    private void CreateTask()
    {
        NavigationManager.NavigateTo("/taskcreate");
    }

    private void EditTask(int taskId)
    {
        NavigationManager.NavigateTo($"/taskedit/{taskId}");
    }

    private async Task DeleteTask(int taskId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete Task ID {taskId}?");
            if (!confirmed) return;

            await TaskApiClient.DeleteTaskAsync(taskId);
            tasks = tasks.Where(t => t.Id != taskId).ToList();
        }
        catch (Exception ex)
        {
            errorMessage = "An error occurred while deleting the task. Please try again.";
            Console.Error.WriteLine($"Error: {ex.Message}");
        }
    }
}
